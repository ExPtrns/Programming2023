# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.
from random import randint
lenN = int(input("Количество элементов в первом наборе: "))
n = list()
lenM = int(input("Количество элементов во втором наборе: "))
m = list()
nmSet = set()
for i in range(lenN):
    # n.append(input(f'{i + 1} элемент первого набора '))
    n.append(randint(0, 5))
for i in range(lenM):
    # m.append(input(f"{i + 1} элемент второго набора "))
    m.append(randint(0, 5))
print(n)
print(m)
for i in range(lenN):
    for j in range(lenM):
        if n[i] == m[j]:
            nmSet.add(n[i])
nmList = list(nmSet)
nmList.sort()
print(nmList)

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены
# только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте
# выросло ai ягод. В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из
# управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед
# некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним. Напишите программу для нахождения
# максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом
# заданной во входном файле грядки.
# n = int(input("Количество кустов на грядке: "))
# b = list()
# for i in range(n):
#     # b.append(int(input(f"Число ягод на {i+1} кусте: ")))
#     b.append(randint(1, 9))
# print(f"{n} => {b}")
# k = 0
# if n < 4:
#     for i in range(n):
#         k += b[i]
# else:
#     k = b[len(b) - 2] + b[len(b) - 1] + b[0]
#     if k < b[len(b) - 1] + b[0] + b[1]:
#         k = b[len(b) - 1] + b[0] + b[1]
#     for i in range(len(b) - 2):
#         if k < (b[i] + b[i + 1] + b[i + 2]):
#             k = b[i] + b[i + 1] + b[i + 2]
# print(k)
