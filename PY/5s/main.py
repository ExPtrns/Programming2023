# n = int(input("Введите кол-во элементов 1-ого списка: "))
# first_list = [int(i) for i in input("Введите значения 1-ого списка: ").split()[:n]]
# m = int(input("Введите кол-во элементов 2-ого списка: "))
# second_list = [int(i) for i in input("Введите значения 2-ого списка: ").split()[:m]]
# print(*[i for i in first_list if i not in second_list])

# n = int(input("Введите кол-во элементов списка: "))
# first_list = [int(i) for i in input("Введите значения списка: ").split()[:n]]
# # 12 35 8 9 1
# print(sum([first_list[i - 1] < first_list[i] > first_list[i + 1]
#            for i in range(1, n - 1)]))
#
# numbers = [int(i) for i in input("Введите числа: ").split()]
# count_numbers = {}
# for i in numbers:
#     if i not in count_numbers:  # count_numbers.keys()
#         count_numbers[i] = 1  # 1 - потому что одно число уже нам встретилось
#     else:  # i является ключом словаря
#         count_numbers[i] += 1
# print(count_numbers)
# print(sum([i // 2 for i in count_numbers.values()]))
"""
При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения переменных
 `a` и `b`  и вызвать функцию

При отправке решения на Проверку закомментируйте эти строки обратно - система автоматически подставит разные значения
 `a` и `b` и сама вызовет функцию для проверки

 Напишите функцию f, которая на вход принимает два числа a и b, и возводит число a в целую степень b с помощью рекурсии.

Функция не должна ничего выводить, только возвращать значение.
"""

# Введите ваше решение ниже

# a = 2
# b = 3
#
#
# def f(a, b):
#     res = a
#     for i in range(b-1):
#         res *= a
#     return res
#
#
# print(f(a, b))
"""
При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения
 переменных `a` и `b`  и вызвать функцию

При отправке решения на Проверку закомментируйте эти строки обратно - система автоматически подставит разные
 значения `a` и `b` и сама вызовет функцию для проверки
 
 Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел. 
 Из всех арифметических операций допускаются только +1 и -1. Также нельзя использовать циклы.

Функция не должна ничего выводить, только возвращать значение.
"""

# Введите ваше решение ниже
# def sum(a, b):
#     res = a
#     if b == 0:
#        return res
#     return sum(res + 1, b - 1)
#
#
# a = 3
# b = 5
# print(sum(a, b))


# Определить индексы элементов массива (списка), значения которых принадлежат заданному диапазону
# (т.е. не меньше заданного минимума и не больше заданного максимума).
# На вход подается список с элементамиlist_1 и границы диапазона в виде чисел min_number, max_number.
# list_1 = [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7]
# min_number = 0
# max_number = 10
#
# # print([i in list_1 if list_1[i] >= min_number and list_1[i] <= max_number else i for i in list_1])
# for i in range(list_1.__len__()):
#     if list_1[i]>=min_number and list_1[i]<=max_number:
#         print(i)
# Заполните массив элементами арифметической прогрессии. Её первый элемент a1 , разность d и количество
# элементов n будет задано автоматически. Формула для получения n-го члена прогрессии:
# an = a1 + (n-1) * d.
# a1 = 2
# d = 3
# n = 4
# l1 =[a1]
# print(l1[0])
# for i in range(1, n):
#     l1.append(l1[i-1]+d)
#     print(l1[i])

# def div(l):
#     for i in l:
#         if i % 2 == 0:
#             print(l[i], l[i]**2)
#
# list1 = [1, 2, 3, 5, 8, 15, 23, 38]
# div(list1)
# Напишите функцию print_operation_table(operation, num_rows, num_columns), которая принимает в качестве аргумента
# функцию, вычисляющую элемент по номеру строки и столбца.
#
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
#
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
#
# Если строк меньше двух, выдайте текст
# ОШИБКА! Размерности таблицы должны быть больше 2!.
#
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у
# операции умножения.

# def print_operation_table(operation, num_rows, num_columns):
#     if num_columns < 2 or num_rows < 2:
#         print("ОШИБКА! Размерности таблицы должны быть больше 2!")
#     else:
#         table = []
#         for i in range(num_rows):
#             table.append(list([i+1]))
#             for j in range(num_columns):
#                 table[i].append(j+2+i)
#         for i in range(1,num_rows):
#             for j in range(1,num_columns):
#                 table[i][j] = (operation(i+1,j+1))
#         for i in range(num_rows):
#             for j in range(num_columns):
#                 if i == 0 and j == num_columns-1:
#                     print(table[i][j], end="")
#                 else:
#                     print(table[i][j], end=" ")
#             if i != num_columns-1:
#                 print()
#
#
# print_operation_table(lambda x, y: x * y, 3, 3)
'''Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках не настолько 
просто, насколько легко он их придумывает, Вам стоит написать программу.

Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами.
Фразы отделяются друг от друга пробелами.

Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka в виде строки. В ответе напишите Парам пам-пам,
если с ритмом все в порядке и Пам парам, если с ритмом все не в порядке.
Если фраза только одна, то ритм определить не получится и необходимо вывести: Количество фраз должно быть больше одной!.
'''

def vowelCount(stroka):
    count = 0
    vowels = set("уеыаоэяию")
    for letter in stroka:
        if letter in vowels:
            count += 1
    return count

stroka = "пара-ра-рам рам-пам-папам па-ра-па-дам"
if len(stroka.split())<2:
    print("Количество фраз должно быть больше одной!")
else:
    filtred = list(map(vowelCount, stroka.split()))
    print(len(set(filtred)))
    if len(set(filtred)) == 1:
        print("Парам пам-пам")
    else:
        print("Пам парам")



    # print("Количество фраз должно быть больше одной!")
#
# elif isRytm(stroka.split()):
#     print("Парам пам-пам")
# else:
#     print("Пам парам")

